---
- name: Update apt package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install Java
  apt:
    name: openjdk-17-jdk
    state: present

- name: Add Jenkins repository key
  apt_key:
    url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
    state: present

- name: Add Jenkins repository
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian-stable binary/"
    state: present
    filename: jenkins

- name: Install Jenkins (latest available)
  apt:
    name: jenkins
    state: latest
    update_cache: yes

- name: Install required packages
  apt:
    name: 
      - docker.io
      - docker-compose
      - curl
      - gnupg
      - software-properties-common
      - unzip
    state: present

- name: Update AWS CLI to v2 (for better EKS support)
  shell: |
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    sudo ./aws/install --update
    rm -rf awscliv2.zip aws/
  args:
    creates: /usr/local/bin/aws2

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes

- name: Install kubectl
  shell: |
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  args:
    creates: /usr/local/bin/kubectl

- name: Install helm
  shell: |
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    creates: /usr/local/bin/helm

- name: Start and enable Jenkins
  systemd:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for Jenkins to start
  wait_for:
    port: 8080
    delay: 10
    state: started
    timeout: 120

- name: Get Jenkins initial admin password
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: jenkins_password

- name: Display Jenkins admin password
  debug:
    msg: "Jenkins initial admin password: {{ jenkins_password.stdout }}"

- name: Create .kube directory
  file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Wait for EKS cluster to be ready
  shell: |
    until aws eks describe-cluster --region eu-west-3 --name garden-web-app-cluster --query 'cluster.status' --output text | grep -q "ACTIVE"; do
      echo "Waiting for EKS cluster to be active..."
      sleep 10
    done
    echo "EKS cluster is active"
  environment:
    HOME: /home/ubuntu
  become_user: ubuntu
  register: cluster_wait
  failed_when: cluster_wait.rc != 0

- name: Display cluster wait result
  debug:
    msg: "{{ cluster_wait.stdout }}"

- name: Configure kubectl for EKS using AWS CLI v2
  shell: |
    aws eks update-kubeconfig --region eu-west-3 --name garden-web-app-cluster --kubeconfig /home/ubuntu/.kube/config
  environment:
    HOME: /home/ubuntu
    AWS_DEFAULT_REGION: eu-west-3
  become_user: ubuntu
  register: kubeconfig_result

- name: Display kubeconfig result
  debug:
    msg: "{{ kubeconfig_result.stdout }}"

- name: Set proper permissions for kubeconfig
  file:
    path: /home/ubuntu/.kube/config
    owner: ubuntu
    group: ubuntu
    mode: '0600'

- name: Verify kubectl configuration
  shell: kubectl config view
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config
  become_user: ubuntu
  register: kubectl_config
  failed_when: kubectl_config.rc != 0

- name: Display kubectl config
  debug:
    msg: "Kubectl configuration:\n{{ kubectl_config.stdout }}"

- name: Test Kubernetes cluster access with retry
  shell: kubectl get nodes --request-timeout=30s
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config
  become_user: ubuntu
  register: k8s_test
  retries: 5
  delay: 10
  until: k8s_test.rc == 0

- name: Display Kubernetes cluster info
  debug:
    msg: "Kubernetes nodes:\n{{ k8s_test.stdout }}"

- name: Install CloudWatch agent
  apt:
    name: amazon-cloudwatch-agent
    state: present

- name: Configure CloudWatch agent
  copy:
    content: |
      {
        "metrics": {
          "metrics_collected": {
            "cpu": {
              "measurement": [
                "cpu_usage_idle",
                "cpu_usage_user",
                "cpu_usage_system"
              ],
              "metrics_collection_interval": 60,
              "totalcpu": false
            },
            "mem": {
              "measurement": [
                "mem_used_percent"
              ],
              "metrics_collection_interval": 60
            },
            "disk": {
              "measurement": [
                "used_percent"
              ],
              "metrics_collection_interval": 60,
              "resources": [
                "/"
              ]
            }
          }
        }
      }
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    owner: root
    group: root
    mode: '0644'

- name: Start CloudWatch agent
  systemd:
    name: amazon-cloudwatch-agent
    state: started
    enabled: yes

- name: Verify CloudWatch agent status
  systemd:
    name: amazon-cloudwatch-agent
  register: cloudwatch_status

- name: Display CloudWatch agent status
  debug:
    msg: "CloudWatch agent is {{ 'running' if cloudwatch_status.status.ActiveState == 'active' else 'not running' }}"